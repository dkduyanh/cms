<?php

namespace backend\models;

use backend\models\main\CronJob;
use Cron\CronExpression;

class CronJobForm extends CronJob
{
    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['name', 'command', 'start_date', 'interval'], 'required'],
            [['created_date', 'start_date', 'end_date', 'last_run_date', 'last_run_result'], 'safe'],
            [['position', 'status'], 'integer'],
            [['name'], 'string', 'max' => 128],
            [['interval', 'type'], 'string', 'max' => 50],
            ['position', 'default', 'value' => 100],
            ['interval', 'validateCronExpression'],
        ];
    }

    /**
     * Validate cron expression is valid
     * @param string $attribute the attribute currently being validated
     * @param mixed $params the value of the "params" given in the rule
     * @param \yii\validators\InlineValidator $validator related InlineValidator instance.
     * This parameter is available since version 2.0.11.
     */
    public function validateCronExpression($attribute, $params, $validator)
    {
        if(!CronExpression::isValidExpression($this->$attribute))
        {
            $this->addError($attribute, 'Cron Expression is invalid!');
        }
    }

    /**
     * @param bool $insert
     * @param array $changedAttributes
     */
    public function afterSave($insert, $changedAttributes)
    {
        //re-generate NextRunUpdate if create or change interval
        if($insert || !empty($changedAttributes['interval'])){
            $this->updateNextRunDate($this->getNextRunDate());
        }
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }
}